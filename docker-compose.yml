version: '3.8'

networks:
  microservices-network:
    external: true

services:
  userservice:
    image: userservice:latest
    build:
      context: .
      dockerfile: Dockerfile
    container_name: userservice
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresql:5432/UserServiceDB
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_DATA_REDIS_HOST: ${REDIS_HOST}
      SPRING_DATA_REDIS_PORT: ${REDIS_PORT}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      - postgresql
      - redis
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD-SHELL", "nc -z kafka 9092 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgresql:
    image: postgres:latest
    environment:
      POSTGRES_DB: UserServiceDB
      POSTGRES_USER: ${SPRING_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}

    container_name: postgresql
    ports:
      - "5432:5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SPRING_DATASOURCE_USERNAME} -d UserServiceDB || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Final task to mark Kafka topic registration as complete
  mark-registration-complete:
    image: redis:latest
    container_name: mark-registration-complete
    depends_on:
      - redis
      - kafka
      - zookeeper
      - userservice
    volumes:
      - ./scripts:/scripts
    networks:
      - microservices-network
    entrypoint: ["sh", "/scripts/mark-kafka-topic-names-complete.sh"]